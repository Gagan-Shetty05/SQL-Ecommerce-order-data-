-- 1.Retrieve the names and emails of all users who signed up in 2023.

select firstname , email from users
where year(signupdate) = '2023';

-- 2.List all products in the Electronics category that are currently in stock.

select productname from products
where category = 'Electronics';

-- 1.Find the total revenue generated by all orders.

select round(sum(totalamount),0) from orders;

-- 2.Identify the product category with the highest number of sales.

select  category , count(stock) salescount from products 
group by category;


-- Retrieve the first names and countries of users who are older than 30.


select firstname, country ,age
from users 
where age >= '30';

-- List all products with a price greater than $500.

select productname ,price 
from products
where price >= '500';

-- Find all orders placed in the last 6 months.

SELECT OrderID, UserID, ProductID, Quantity, OrderDate, TotalAmount
FROM Orders
WHERE OrderDate >= DATE_ADD(CURDATE(), INTERVAL -6 MONTH)
ORDER BY OrderDate DESC;

-- 1.Get the details of all orders along with the customer names and product names.

select o.* ,p.productname, u.firstname 
 from products p
join orders o on o.productid=p.productid
join users u on o.userid=u.userid 
order by orderid asc;

-- 2.List all users who purchased a product in the Furniture category.


SELECT U.UserID, U.FirstName, U.LastName, U.Email, U.Country
FROM Users U
JOIN Orders O ON U.UserID = O.UserID
JOIN Products P ON O.ProductID = P.ProductID
WHERE P.Category = 'Furniture';

-- 1.Find the top 3 products with the highest sales revenue.


SELECT 
    P.ProductID,
    P.ProductName,
    P.Category,
    SUM(O.TotalAmount) AS TotalRevenue
FROM
    Products P
        JOIN
    Orders O ON P.ProductID = O.ProductID
GROUP BY P.ProductID , P.ProductName , P.Category
ORDER BY TotalRevenue DESC
LIMIT 3;

-- 2.Retrieve the names of users who have placed orders worth more than $1,000.

select firstname ,o.totalamount 
from users u
join orders o on u.userid=o.userid
where totalamount >= '1000';

-- 1.Calculate the average order value per customer.

SELECT U.UserID, U.FirstName, U.LastName, AVG(O.TotalAmount) AS AverageOrderValue
FROM Users U
JOIN Orders O ON U.UserID = O.UserID
GROUP BY U.UserID, U.FirstName, U.LastName
ORDER BY AverageOrderValue DESC;

-- 2.Identify the country with the highest number of customers.

select country ,count(o.userid) totalcustomer
from users u
join orders o
on  u.userid=o.userid
group by country
order by totalcustomer desc ;

-- Retrieve the first names and countries of users who are older than 30.


select firstname, country ,age
from users 
where age >= '30';

-- List all products with a price greater than $500.

select productname ,price 
from products
where price >= '500';

-- Find all orders placed in the last 6 months.

SELECT OrderID, UserID, ProductID, Quantity, OrderDate, TotalAmount
FROM Orders
WHERE OrderDate >= DATE_ADD(CURDATE(), INTERVAL -6 MONTH)
ORDER BY OrderDate DESC;

-- Show the details of orders, including the userâ€™s full name and product name.

select o.orderid , u.firstname,u.lastname ,p.productname 
from users u
join orders o
on u.userid=o.userid 
join products p
on p.productid=o.productid
order by orderid ;

-- List all users who have purchased more than one type of product.

select o.userid,count(productid) as totalproduct
from orders o
join users u
on o.userid=o.userid
group by userid 
having totalproduct > 1;

-- Retrieve the order details for users from the USA.

select o.* ,u.country 
from users u
join orders o
on u.userid=o.userid 
where country = 'United States of America';

-- Find the average price of products in each category.

select category, round(avg(price),0) as avgprice from products
group by category
order by avgprice;

-- Determine the total quantity of products sold for each product.
 
 select o.productid ,p.productname,sum(quantity) totalquantity
from orders o
join products p
on o.productid=p.productid
group by productid
order by totalquantity desc;

-- Retrieve orders where the total amount exceeds $1,000.

select * from orders 
where totalamount  >='1000'
order by totalamount desc;

-- Find users who have not placed any orders.

select u.*
from users  u
where u.userid NOT in (select distinct userid from orders);--  USING SUBQUERIS


SELECT U.UserID, U.FirstName, U.LastName, U.Email, U.Country
FROM Users U
LEFT JOIN Orders O ON U.UserID = O.UserID
WHERE O.OrderID IS NULL; -- USING LEFT JOIN-- 

-- Find the number of orders placed by each user.

 select userid, count(orderid) numberoforder
 from orders 
 group by userid 
 order by numberoforder desc;
 
--  Get the total revenue generated by each product category.

select sum(totalamount)totalrevenue , category
from products p
join orders o 
on o.productid=p.productid
group by category;

-- Determine the average order value for each user.

select userid,round(avg(totalamount),1) avgordervalue
from orders 
group by userid
order by avgordervalue desc;

-- List all users who have ordered the most expensive product.

select u.firstname,u.lastname,p.productname,p.price from users u
join orders o
on o.userid=u.userid
join products p
on o.productid=p.productid
where p.price = (
select price from products
order by price desc limit 1);

-- Retrieve products with a price above the average price of all products.

select productname ,category ,price
from products 
where price >=
(select round(avg(price),0)
from products);

-- Find the order(s) with the highest total amount.

select * from orders 
where totalamount =(
select max(totalamount)
from orders )
;
-- Identify the top 5 users by total spending.

select userid , sum(totalamount) totalspending
from orders 
group by userid
order by totalspending desc limit 5;

-- Show the top 3 most popular products based on the number of orders.

SELECT P.ProductID, P.ProductName, P.Category, COUNT(O.OrderID) AS OrderCount
FROM Products P
JOIN Orders O ON P.ProductID = O.ProductID
GROUP BY P.ProductID, P.ProductName, P.Category
ORDER BY OrderCount DESC
LIMIT 3;

-- Retrieve the monthly revenue for the last year.

SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month,
       SUM(TotalAmount) AS MonthlyRevenue
FROM Orders
WHERE OrderDate >= DATE_ADD(CURDATE(), INTERVAL -1 YEAR)
GROUP BY DATE_FORMAT(OrderDate, '%Y-%m')
ORDER BY Month ASC;

-- Calculate the percentage of orders that include products from the "Electronics" category
   
   SELECT 
    (COUNT(DISTINCT CASE WHEN P.Category = 'Electronics' THEN O.OrderID END) * 100.0 / COUNT(DISTINCT O.OrderID)) AS ElectronicsOrderPercentage
FROM Orders O
JOIN Products P ON O.ProductID = P.ProductID;
